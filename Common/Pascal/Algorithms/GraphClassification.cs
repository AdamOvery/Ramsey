using System.Text.RegularExpressions;

namespace Pascal;


public class GraphClassification
{
    abstract record class Signature : IComparable<Signature>
    {
        public int CompareTo(Signature? other)
        {
            return this.ToString().CompareTo(other?.ToString());
        }
    }

    record class AdjSignature(Signature[] adj) : Signature
    {
        override public string ToString()
        {
            return $"[{String.Join(',', adj.Select(a => a.ToString()))}]";
        }
    }

    record class LnkSignature(int lnk) : Signature
    {
        override public string ToString()
        {
            return lnk.ToString();
        }
    }


    static Regex codeComment = new Regex(@"\/\*[^*]*\*\/", RegexOptions.Multiline);

    public static string removeComments(string? signatureWithComments)
    {
        return codeComment.Replace(signatureWithComments ?? "", "");
    }

    class NoCommentsComparer : IComparer<string>
    {
        public int Compare(string? x, string? y)
        {
            return removeComments(x).CompareTo(removeComments(y));
        }

        public static NoCommentsComparer instance = new NoCommentsComparer();
    }

    private static string GetSignature(IGraph g, INode n1, bool withComments = false)
    {

        int[] visited = new int[g.order];

        var getSignature = new Func<INode, int, Signature>((start, depth) => { return new LnkSignature(0); });

        getSignature = (INode start, int depth) =>
        {
            if (visited[start.id] > 0) return new LnkSignature(depth - visited[start.id] - 1);
            else
            {
                visited[start.id] = depth;
                var adjacentNodes = start.adjacentNodes.Select(n =>
                {
                    if (n == n1) return new LnkSignature(0);
                    else return getSignature(n, depth + 1);
                }).ToArray();
                Array.Sort(adjacentNodes);
                visited[start.id] = 0;
                return new AdjSignature(adjacentNodes);
            }
        };
        var signature = getSignature(n1, 1);
        return signature.ToString();
    }



    private static string GetSignatures(ISubGraph subgraph, bool withComments = false)
    /*
Cm [
    [[[-2,0],0],[[-2,0],0]],
    [[[-2,0],0],[[-2,0],0]],
    [[[-2,0],0],[[-2,0],0]],
    [[0]],
    [[0]]
]

[
    (N0:) [(N1:)[(N0:)0,(N2:)[(N1:)1],(N3:)[(N0:)0,(N1:)1]],(N3:)[(N0:)0,(N1:)[(N0:)0,(N2:)[(N1:)1],(N3:)1]]],\n
    (N1:) [(N0:)[(N1:)0,(N3:)[(N0:)1,(N1:)0]],(N2:)[(N1:)0],(N3:)[(N0:)[(N1:)0,(N3:)1],(N1:)0]],\n
    (N2:) [(N1:)[(N0:)[(N1:)1,(N3:)[(N0:)1,(N1:)2]],(N2:)0,(N3:)[(N0:)[(N1:)2,(N3:)1],(N1:)1]]],\n
    (N3:) [(N0:)[(N1:)[(N0:)1,(N2:)[(N1:)1],(N3:)0],(N3:)0],(N1:)[(N0:)[(N1:)1,(N3:)0],(N2:)[(N1:)1],(N3:)0]]
]

A = [-2,0]
B = [0]
C = [A,0]
D = [B]
E = [C,C]

// [E,E,E,D,D]
     */
    {
        // var signatures = new List<string>();
        var signatures = new List<string>();
        foreach (var n1 in subgraph.nodes)
        {
            signatures.Add(GetSignature(subgraph.graph, n1, withComments));
        }
        string result;
        if (!withComments) signatures.Sort();

        var delim = withComments ? ",\n" : ",";
        result = "[" + String.Join(delim, signatures) + "]";
        return result;


    }



    static void TestSignature(string g6, string expectedSignature, bool withComments = false)
    {
        var subgraph = (G6.parse(g6).AsSubGraph())!;
        
        var newSignature = GetSignatures(subgraph, withComments);
        TestEngine.AssertEquals($"Graph {g6} new signature", () => newSignature, expectedSignature);
    }

    public static void Tests()
    {
        // TestCliqueOf5andCliqueOf3();
        // TestRandomGraph();
        //TestTwoInFour();
        //TestTriangleWithLeg();
        // TestSmallGraphOf3();
        //TestSmallGraphOf4();
        TestSmallGraphOf5II();
        TestBiggerGraphOf5();
        TestLargerGraphOf12();
    }

    public static void TestTwoInFour()
    {
        TestSignature("CC", @"[/*N0:*/[/*N3:*/[/*N0:*/0]],
/*N1:*/[],
/*N2:*/[],
/*N3:*/[/*N0:*/[/*N3:*/0]]]", true);
    }

    public static void TestSmallGraphOf4()
    {
        TestSignature("Cm", "[[[[-2,0],0],[[-2,0],0]],[[[-2,0],0],[[-2,0],0]],[[[-2,0],0],[[-2,0],0]],[[0]],[[0]]]", true);
    }

    public static void TestSmallGraphOf5()
    {
        TestSignature("DKW", "[[[[0,1],0],[[0,1],0]],[[[0,1],0],[[0,1],0]],[[[0,1],0],[[0,1],0]],[[0]],[[0]]]");
        TestSignature("DeG", "[[[[0,1],0],[[0,1],0]],[[[0,1],0],[[0,1],0]],[[[0,1],0],[[0,1],0]],[[0]],[[0]]]");
        TestSignature("DKc", "[[[[0,1],0],[[0,1],0]],[[[0,1],0],[[0,1],0]],[[[0,1],0],[[0,1],0]],[[0]],[[0]]]");
    }

    public static void TestSmallGraphOf5II()
    {
        var sig5 = "[[[[0,1],0],[[0,1],0]],[[[0,1],0],[[0,1],0]],[[[0,1],0],[[0,1],0]],[[0]],[[0]]]";
        TestSignature("DKW", sig5);
        TestSignature("DeG", sig5);
        TestSignature("DKc", sig5);
    }

    public static void TestBiggerGraphOf5()
    {
        const string sig5 = "[[[[[[1,2],1],[[1,2],1],0,1],0],[[[1,2],1],[[1,2],1],[0,1],0]],[[[[[1,2],1],[[1,2],1],0,1],0],[[[1,2],1],[[1,2],1],[0,1],0]],[[[[[1,2],1],[[1,2],1],0,1],0],[[[1,2],1],[[1,2],1],[0,1],0]],[[[[[1,2],1],[[1,2],1],0,1],0],[[[1,2],1],[[1,2],1],[0,1],0]],[[[0,1],0],[[0,1],0],[[0,1],0],[[0,1],0]]]";
        TestSignature("DK{", sig5);
        TestSignature("DyS", sig5);
        TestSignature("DxK", sig5);
    }

    public static void TestLargerGraphOf12()
    {
        // "K]W@WC@?G?oD"
        const string sig12 = "[[[[[[[[[[[[[1,10,2,4],1,9],[[1,10,2],1,3,9],1],1],[[[[1,4],1,2],1,8],[[1,2,9],[1,3],1],1,7],1],1,3],1],1],[[[[[[1,2,4,8],1,7],[[1,2,8],1,3,7],1],1],[[[[1,4],1,2],1,6],[[1,2,7],[1,3],1],1,5],1],[[1,3],1],1],1],1],[[[[[[[[[[1,10],1,3],1],1],[[[1,3],1],[1,8],1],1],1,3],1],1,2],[[[[[[1,8],1,3],1],1],[[[1,3],1],[1,6],1],1],[[1,3,4],1],1],1,2],[[[[[[[[1,9],1,3],1],1],[[[1,3],1],[1,7],1],1],[1,3,4,5],1],1],[[[[[[[1,9],1,3],1],1],[[[1,3],1],[1,7],1],1],[1,3],1],1,2,3],1],1],[[[[[[[[[[1,10],1,3],1],1],[[[1,3],1],[1,8],1],1],1,4],1],1,2],1,2],[[[[[[[[1,9],1,3],1],1],[[[1,3],1],[1,7],1],1],1,3],1],[1,2,3],1],[[[[[[1,7],1,3],1],1],[[[1,3],1],[1,5],1],1],[[[1,4,5],1,3],1],1],1],0]],[[[[[[[[[[[[1],0,1,2],1,2,4],[[1,2,3,5],[1],0,1],1],[[[[1],0,1,2],1,2],[[1,2,3],[1],0,1],1,3],1],1],[[[[[1,5],1,3],1,2],[1],0,1],[[[[1],0,1,3],1,2],[1,3],1],[[[1,4],1,2],[[1],0,1,2],1],1],1],1,3],1],1],[[[[[[[[1],0,1,2],1,2,4],[[1,2,3,5],[1],0,1],1],[[[[1],0,1,2],1,2],[[1,2,3],[1],0,1],1,3],1],1],[[[[[1,5],1,3],1,2],[1],0,1],[[[[1],0,1,3],1,2],[1,3],1],[[[1,4],1,2],[[1],0,1,2],1],1],1],[[1,3],1],1],0],[[[[[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1,3],1],1,2],[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],[[1,3,4],1],1],1,2],[[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],[1,3,4,5],1],1],[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],[1,3],1],1,2,3],1],1],[[[[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1,4],1],1,2],1,2],[[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1,3],1],[1,2,3],1],[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],[[[1,4,5],1,3],1],1],1],[1],0]],[[[[[[[[[[[[1],0,1,9],1],1,3],1],1],[[[[1],0,1,7],1],[[1,3],1],1],1],0,1],1],0,1],[[[[[[[[[0,1,9],1],0,1],1,3],1],1],[[[[0,1,7],1],0,1],[[1,3],1],1],1],1],[1],0,1],0],[[[[[[[[[[0,1,9],[1],0,1],1],1,3],1],1],[[[[0,1,7],[1],0,1],1],[[1,3],1],1],1],0,1],1],[[[[[[[[[1,9],0,1],1,3],1],1],[[[1,3],1],[[1,7],0,1],1],1],1],[1],0,1],0,1],0],[[[[[[[[[[0,1,9],0,1],1],0,1],1,3],1],1],[[[[[0,1,7],0,1],1],0,1],[[1,3],1],1],1],1],[[[[[[[[[1,9],1,3],1],1],[[[1,3],1],[1,7],1],1],0,1],1],0,1],0,1],[1],0],[[[[[[[[[[1,3,9],1],1],[[[1,3],1],1,7],1],1],[1],0,1],0,1],0,1],1],[[[[[[[[[1,9],0,1],0,1],[1],0,1],1],1,3],1],1],[[[[[[1,7],0,1],0,1],[1],0,1],1],[[1,3],1],1],1],0]],[[[[[[[[[[[[1],0,1,9],1],1,3],1],1],[[[[1],0,1,7],1],[[1,3],1],1],1],1,3],1],0,1],[[[[[[[[[0,1,9],1],1,7],1,3],1],1],[[[[0,1,7],1],1,5],[[1,3],1],1],1],1],[1],0,1],[[[[[[[[1],0,1,7],1],1,3],1],1],[[[[1],0,1,5],1],[[1,3],1],1],1],[[0,1,3],1],1],0],[[[[[[[[[[0,1,3,9],0,1],1],[[[1,3],0,1],0,1,7],1],1,3],1],1],[[[[[0,1,3,7],0,1],1],[[[1,3],0,1],0,1,5],1],[[1,3],1],1],1],1],[[[[[[[[[1,9],1,3],1],1],[[[1,3],1],[1,7],1],1],1,3],1],0,1],[[[[[[1,7],1,3],1],1],[[[1,3],1],[1,5],1],1],[[0,1,3],1],1],0,1],[1],0],[[[[[[[[[[0,1,7,9],[1],0,1],1],1,3],1],1],[[[[0,1,5,7],[1],0,1],1],[[1,3],1],1],1],[[[[[[[1,3,7],1],1],[[[1,3],1],1,5],1],1],[1],0,1],0,1,3],1],1],[[[[[[[[[1,9],1,7],1,3],1],1],[[[1,3],1],[[1,7],1,5],1],1],1],[1],0,1],[[[[[[[[1],0,1,7],1],1,3],1],1],[[[[1],0,1,5],1],[[1,3],1],1],1],[1,3],1],0,1],0]],[[[[[[[[[[[[1],1,7,8],1],1,3],1],1],[[[[1],1,5,6],1],[[1,3],1],1],1],0,1],[[[[[[[0,1,7],1,3],1],1],[[[1,3],1],[0,1,5],1],1],1],[1],1,2],1,2],[[[[[[[[1,7,8,9],0,1],1,3],1],1],[[[1,3],1],[[1,5,6,7],0,1],1],1],1],[[[[[[[1,7],1,3],1],1],[[[1,3],1],[1,5],1],1],0,1],1,2,3],[1],1],1],[[[[[[[[[0,1,8],1,3],1],1],[[[1,3],1],[0,1,6],1],1],1],[1],1,2],1,2],[[[[[[[[1,8,9],[1],1,7],1],1,3],1],1],[[[[1,6,7],[1],1,5],1],[[1,3],1],1],1],0,1],[[[[[[[0,1,7],1,3],1],1],[[[1,3],1],[0,1,5],1],1],1],[1,2,3],[1],1],1],0],[[[[[[[[[[0,1,2],1,2,8],[[1,2,3,9],0,1],1],[[[0,1,2],1,2],[[1,2,3],0,1],1,7],[1],1],1],1,3],1],1],[[[[[[0,1,2],1,2,6],[[1,2,3,7],0,1],1],[[[0,1,2],1,2],[[1,2,3],0,1],1,5],[1],1],1],[[1,3],1],1],1],[[[[[[[[[1,3,9],1],1],[[[1,3],1],1,7],1],1],[1],1,3],1,2],0,1],[[[[[[[1,3,8],1],1],[[[1,3],1],1,6],1],1],[1],1,2],[0,1,2],1],[[[[[[1,3,7],1],1],[[[1,3],1],1,5],1],1],[[0,1,3],1,2],[1],1],1],0]],[[[[[[[[[[[0,1,2,4],0,1],[[0,1,2],0,1,3],1],1],[[[[1,4],1,2],0,1],[[0,1,2],[1,3],1],0,1],1],1,3],1],1],[[[[[[0,1,2,4],0,1],[[0,1,2],0,1,3],1],1],[[[[1,4],1,2],0,1],[[0,1,2],[1,3],1],0,1],1],[[1,3],1],1],1],0],[[[[[[[[[[0,1],1,3],1],1],[[[1,3],1],[0,1],1],1],1,3],1],1,2],[[[[[[0,1],1,3],1],1],[[[1,3],1],[0,1],1],1],[[1,3,4],1],1],0,1],[[[[[[[[0,1],1,3],1],1],[[[1,3],1],[0,1],1],1],[0,1,3,4],1],1],[[[[[[[0,1],1,3],1],1],[[[1,3],1],[0,1],1],1],[1,3],1],0,1,2],1],0],[[[[[[[[[[0,1],1,3],1],1],[[[1,3],1],[0,1],1],1],1,4],1],1,2],0,1],[[[[[[[[0,1],1,3],1],1],[[[1,3],1],[0,1],1],1],1,3],1],[0,1,2],1],[[[[[[0,1],1,3],1],1],[[[1,3],1],[0,1],1],1],[[[0,1,4],1,3],1],1],0],[0]],[[[[[[[[[[[0,1,2,8],0,1],[[0,1,2],0,1,7],[1],1],1],1,3],1],1],[[[[[0,1,2,6],0,1],[[0,1,2],0,1,5],[1],1],1],[[1,3],1],1],1],[[[[[[[[1,3,8],1],1],[[[1,3],1],1,6],1],1],[1],1,2],0,1],[[[[[[1,3,7],1],1],[[[1,3],1],1,5],1],1],[0,1,2],[1],1],0,1],1],0],[[[[[[[[[[0,1],1,7],1,3],1],1],[[[0,1],1,5],[[1,3],1],1],1],1],[1],1,2],[[[[[[[[1],1,7,8],1],1,3],1],1],[[[[1],1,5,6],1],[[1,3],1],1],1],[0,1],1],0,1],[[[[[[[[0,1,7,8],[0,1],1],1,3],1],1],[[[0,1,5,6],[0,1],1],[[1,3],1],1],1],1],[[[[[[[1,7],1,3],1],1],[[[1,3],1],[1,5],1],1],[0,1],1],0,1,2],[1],1],0],[[[[[[[[[[0,1],1,8],1,3],1],1],[[[0,1],1,6],[[1,3],1],1],1],1],[1],1,2],0,1],[[[[[[[[0,1,8],[1],1,7],1],1,3],1],1],[[[[0,1,6],[1],1,5],1],[[1,3],1],1],1],[0,1],1],[[[[[[[[0,1],1,7],1,3],1],1],[[[0,1],1,5],[[1,3],1],1],1],1],[0,1,2],[1],1],0]],[[[[[[[[[[[0,1,3],1],1,2],[[[1,3,4],1],0,1],1,2],[[[[1,3,4,5],0,1],1],[[[1,3],0,1],1,2,3],1],1],[[[[[0,1,4],1],1,2],1,2],[[[[1,4,5],1,3],1],0,1],[[[0,1,3],1],[1,2,3],1],1],[1],1],1],0,1],1],0],[[[[[[[[[[0,1],1],0,1],1],[1],1,2],1,2,4],[[[[[0,1],1],0,1],1],[1,2,3,5],[1],1],1],[[[[[[[0,1],1],0,1],1],[1],1,2],1,2],[[[[[0,1],1],0,1],1],[1,2,3],[1],1],1,3],1],1],[[[[[[[[0,1],1],0,1],1],[1],1,3],1,2],[1,3],1],[[[[[[0,1],1],0,1],1],[1],1,2],[[1,4],1,2],1],[[[[[0,1],1],0,1],1],[[[1,5],1,3],1,2],[1],1],1],0],[[[[[[[[0,1,3],1],1,2],[[[1,3,4],1],0,1],1,2],[[[[1,3,4,5],0,1],1],[[[1,3],0,1],1,2,3],1],1],[[[[[0,1,4],1],1,2],1,2],[[[[1,4,5],1,3],1],0,1],[[[0,1,3],1],[1,2,3],1],1],[1],1],1],[[0,1],1],0]],[[[[[[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1],[1],1,2],0,1,2],[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1],[0,1,2,3],[1],1],1],[[[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1],[1],1,2],1,2],[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1],[1,2,3],[1],1],0,1],1],0],[[[[[[[[[[0,1],1,2],0,1,2],[[0,1,2,3],[0,1],1],1],[[[[0,1],1,2],1,2],[[0,1],[1,2,3],1],0,1],[1],1],1],1,3],1],1],[[[[[[[0,1],1,2],0,1,2],[[0,1,2,3],[0,1],1],1],[[[[0,1],1,2],1,2],[[0,1],[1,2,3],1],0,1],[1],1],1],[[1,3],1],1],0],[[[[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1],[1],1,3],1,2],[0,1],1],[[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1],[1],1,2],[[0,1],1,2],1],[[[[[[0,1,3],1],1],[[[1,3],1],0,1],1],1],[[[0,1],1,3],1,2],[1],1],0]],[[[[[[[[[[[0,1,8],1,3],1],1,2],[[[1,3,4],1],[0,1,6],1],1,2],[[[[0,1,7],[1,3,4,5],1],1],[[[0,1,7],[1,3],1],1,2,3],1],1],[[[[[[0,1,8],1,4],1],1,2],1,2],[[[[0,1,7],1,3],1],[1,2,3],1],[[[[1,4,5],1,3],1],[0,1,5],1],1],[1],1],1],[[[[[[[[1,8],[1],1,2],1,2,4],[[1,2,3,5],[1,7],[1],1],1],[[[[1,8],[1],1,2],1,2],[[1,2,3],[1,7],[1],1],1,3],1],1],[[[[[1,5],1,3],1,2],[1,5],[1],1],[[[[1,7],[1],1,3],1,2],[1,3],1],[[[1,4],1,2],[[1,6],[1],1,2],1],1],1],0,1],1],0],[[[[[[[[[[0,1],1,8],1],[1],1,2],1,2,4],[[[[0,1],1,7],1],[1,2,3,5],[1],1],1],[[[[[[0,1],1,8],1],[1],1,2],1,2],[[[[0,1],1,7],1],[1,2,3],[1],1],1,3],1],1],[[[[[[[0,1],1,7],1],[1],1,3],1,2],[1,3],1],[[[[[0,1],1,6],1],[1],1,2],[[1,4],1,2],1],[[[[0,1],1,5],1],[[[1,5],1,3],1,2],[1],1],1],1],[[[[[[[[1,3,4,5],1,7],1],[[[1,3],1,7],1,2,3],1],[[[[1,3,4],1],1,6],[[[1,3,8],1],1,2],1,2],1],[[[[[1,4,5],1,3],1],1,5],[[[[1,4,8],1],1,2],1,2],[[[1,3,7],1],[1,2,3],1],1],[1],1],1],[0,1],1],0]],[[[[[[[[[[[0,1,8],1],[1],1,2],1,2,4],[[[0,1,7],1],[1,2,3,5],[1],1],1],[[[[[0,1,8],1],[1],1,2],1,2],[[[0,1,7],1],[1,2,3],[1],1],1,3],1],1],[[[[[[0,1,7],1],[1],1,3],1,2],[1,3],1],[[[[0,1,6],1],[1],1,2],[[1,4],1,2],1],[[[[1,5],1,3],1,2],[[0,1,5],1],[1],1],1],1],[[[[[[[[1,3,4,5],1,7],1],[[[1,3],1,7],1,2,3],1],[[[[1,3,4],1],1,6],[[[1,3,8],1],1,2],1,2],1],[[[[[1,4,5],1,3],1],1,5],[[[[1,4,8],1],1,2],1,2],[[[1,3,7],1],[1,2,3],1],1],[1],1],1],0,1],1],0],[[[[[[[[[[0,1],1,8],1,3],1],1,2],[[[0,1],1,6],[[1,3,4],1],1],1,2],[[[[[0,1],1,7],[1,3,4,5],1],1],[[[[0,1],1,7],[1,3],1],1,2,3],1],1],[[[[[[[0,1],1,8],1,4],1],1,2],1,2],[[[[[0,1],1,7],1,3],1],[1,2,3],1],[[[[1,4,5],1,3],1],[[0,1],1,5],1],1],[1],1],1],[[[[[[[[1,8],[1],1,2],1,2,4],[[1,2,3,5],[1,7],[1],1],1],[[[[1,8],[1],1,2],1,2],[[1,2,3],[1,7],[1],1],1,3],1],1],[[[[[1,5],1,3],1,2],[1,5],[1],1],[[[[1,7],[1],1,3],1,2],[1,3],1],[[[1,4],1,2],[[1,6],[1],1,2],1],1],1],[0,1],1],0]],[[[[[[[[[[[0,1],[1],1,2],1,2,4],[[0,1],[1,2,3,5],[1],1],1],[[[[0,1],[1],1,2],1,2],[[0,1],[1,2,3],[1],1],1,3],1],1],[[[[[0,1],[1],1,3],1,2],[1,3],1],[[[[1,5],1,3],1,2],[0,1],[1],1],[[[0,1],[1],1,2],[[1,4],1,2],1],1],1],0,1],1],0],[[[[[[[[[[0,1],1],0,1],1,3],1],1,2],[[[[0,1],1],0,1],[[1,3,4],1],1],1,2],[[[[[[0,1],1],0,1],[1,3,4,5],1],1],[[[[[0,1],1],0,1],[1,3],1],1,2,3],1],1],[[[[[[[[0,1],1],0,1],1,4],1],1,2],1,2],[[[[[[0,1],1],0,1],1,3],1],[1,2,3],1],[[[[0,1],1],0,1],[[[1,4,5],1,3],1],1],1],[1],1],0],[[[[[[[[0,1],[1],1,2],1,2,4],[[0,1],[1,2,3,5],[1],1],1],[[[[0,1],[1],1,2],1,2],[[0,1],[1,2,3],[1],1],1,3],1],1],[[[[[0,1],[1],1,3],1,2],[1,3],1],[[[[1,5],1,3],1,2],[0,1],[1],1],[[[0,1],[1],1,2],[[1,4],1,2],1],1],1],[[0,1],1],0]]]";
        TestSignature("K]W@WC@?G?oD", sig12);
        TestSignature("KC@C?[K{C_?P", sig12);
        TestSignature("KGsA@?dCHEQ?", sig12);
    }

    public static void TestTriangleWithLeg()
    {
        TestSignature("Cm", "[/*N0:*/[/*N1:*/[/*N0:*/0,/*N2:*/[/*N1:*/1],/*N3:*/[/*N0:*/0,/*N1:*/1]],/*N3:*/[/*N0:*/0,/*N1:*/[/*N0:*/0,/*N2:*/[/*N1:*/1],/*N3:*/1]]],\n/*N1:*/[/*N0:*/[/*N1:*/0,/*N3:*/[/*N0:*/1,/*N1:*/0]],/*N2:*/[/*N1:*/0],/*N3:*/[/*N0:*/[/*N1:*/0,/*N3:*/1],/*N1:*/0]],\n/*N2:*/[/*N1:*/[/*N0:*/[/*N1:*/1,/*N3:*/[/*N0:*/1,/*N1:*/2]],/*N2:*/0,/*N3:*/[/*N0:*/[/*N1:*/2,/*N3:*/1],/*N1:*/1]]],\n/*N3:*/[/*N0:*/[/*N1:*/[/*N0:*/1,/*N2:*/[/*N1:*/1],/*N3:*/0],/*N3:*/0],/*N1:*/[/*N0:*/[/*N1:*/1,/*N3:*/0],/*N2:*/[/*N1:*/1],/*N3:*/0]]]", true);
    }



    public static void TestCliqueOf5andCliqueOf3()
    {
        // https://ramsey-paganaye.vercel.app/pascal/1?g6=K~{???A????S
        // var g = (G6.parse("Fg???").AsSubGraph())!;
        TestSignature("K~{???A????S", "[[[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0]],[[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0]],[[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0]],[[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0]],[[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0],[[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],[-2,[-2,-3,[-2,-3,-4,0],0],[-2,-3,[-2,-3,-4,0],0],0],0]],[[[-2,0],0],[[-2,0],0]],[[[-2,0],0],[[-2,0],0]],[[[-2,0],0],[[-2,0],0]],[],[],[],[]]");

    }
}

